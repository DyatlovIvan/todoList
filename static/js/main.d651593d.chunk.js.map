{"version":3,"sources":["api/todolistsApi.ts","App/appReducer.ts","utils/errorUtils.ts","features/Login/authReducer.ts","features/TodolistsList/Todolist/todoListsReducer.ts","features/TodolistsList/Todolist/tasksReducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/todoList.tsx","shared/urls.ts","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","App/App.tsx","serviceWorker.ts","App/store.ts","index.tsx","features/TodolistsList/Todolist/todoList.module.css"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","RequestStatusType","todolistsApi","get","title","post","todolistId","delete","put","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setError","error","setStatus","status","Failed","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","payload","value","AuthReducer","reducer","actions","Idle","isInitialized","setAppInitialized","AppReducer","removeTodolist","index","findIndex","tl","id","todoListID","splice","addNewTodolist","unshift","todolist","filter","entityStatus","updateTodolistTitle","changeFilterTodoListAC","setTodoLists","todoLists","map","m","changeTodolistEntityStatus","TodoListsReducer","removeTask","tasks","t","addNewTask","task","todoListId","updateTask","setTask","extraReducers","builder","addCase","forEach","TasksReducer","updateTaskTC","domainModel","getState","Loading","currentTask","Tasks","find","f","apiModel","description","priority","startDate","deadline","then","res","resultCode","catch","finally","Succeeded","console","warn","AddItemForm","React","memo","callBack","disabled","useState","newTaskTitle","setNewTaskTitle","TextField","label","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","onClick","trim","color","ControlPoint","EditableSpan","edit","setEdit","newTitle","setNewTitle","className","Complete","style","isDone","onBlur","autoFocus","onDoubleClick","Task","useDispatch","onChangeTaskStatusHandler","useCallback","checked","New","updateTaskHandler","onClickRemoveTask","removeTaskTC","Checkbox","Delete","theme","createTheme","palette","primary","main","TodoList","demo","props","useEffect","todoList","items","onClickFilterHandler","changeFilter","AddTaskHandler","updateTodolistHandler","tasksForTodoList","mappingTasks","Button","variant","ThemeProvider","URLS","TodolistsList","navigate","useNavigate","useSelector","TodoLists","Login","addNewTodolistHandler","item","addNewTodolistTC","updateTodolistTitleTC","addNewTaskHandler","addNewTaskTC","Grid","padding","container","spacing","el","Paper","Alert","ref","elevation","ErrorSnackbars","App","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","position","top","textAlign","CircularProgress","AppBar","Toolbar","Typography","component","flexGrow","LinearProgress","Container","path","element","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.d651593d.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'd7bfc3c8-2c2d-429a-afe3-69f3367ec679'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n//types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses{\r\n    New,\r\n    InProgress,\r\n    Complete,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriorities{\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    status: TaskStatuses\r\n    description: string\r\n    startDate: string\r\n    deadline: string\r\n    addedDate: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    todoListId: string\r\n}\r\n\r\ntype GetTaskResponseType = {\r\n    items: Array<TaskType>\r\n    error: string|null\r\n    totalCount: number\r\n}\r\n\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email:string,\r\n    password:string,\r\n    rememberMe:boolean,\r\n    captcha?:string\r\n}\r\n//api\r\nexport const todolistsApi = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{item:TodolistType}>>('todo-lists', {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n    getTasks(todolistId:string) {\r\n        return instance.get<GetTaskResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId:string,title:string){\r\n        return instance.post<ResponseType<{item:TaskType}>>(`todo-lists/${todolistId}/tasks`,{title:title})\r\n    },\r\n    deleteTask(todolistId:string,taskId:string){\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId:string,taskId:string,model:UpdateTaskModelType){\r\n        return instance.put(`todo-lists/${todolistId}/tasks/${taskId}`,model)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data:LoginParamsType){\r\n        return instance.post<ResponseType<{userId?:number}>>('auth/login',data)\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<{id:number,email:string,login:string}>>('auth/me')\r\n    }\r\n\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolistsApi\";\r\nimport {setIsLoggedIn} from \"../features/Login/authReducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppError} from \"../utils/errorUtils\";\r\n\r\nexport enum RequestStatusType {\r\n    Idle = 'idle',\r\n    Loading = 'loading',\r\n    Succeeded = 'succeeded',\r\n    Failed = 'failed'\r\n}\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    //true когда приложение проинициализировалось(проверили юзера, получили настройки)\r\n    isInitialized: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: RequestStatusType.Idle,\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setError(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppInitialized(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\nexport const AppReducer = slice.reducer\r\nexport const {setError, setStatus, setAppInitialized} = slice.actions;\r\n\r\n\r\nexport const initializeApp = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn({value: true}))\r\n            } else {\r\n                handleServerAppError(res.data,dispatch)\r\n            }\r\n\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppInitialized({isInitialized: true}))\r\n        })\r\n\r\n}","import {RequestStatusType, setError, setStatus} from \"../App/appReducer\";\r\nimport {ResponseType} from \"../api/todolistsApi\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <D>(data:ResponseType<D>, dispatch: Dispatch)=>{\r\n    if (data.messages.length) {\r\n        dispatch(setError({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setError({error:'Some error'}))\r\n    }\r\n    dispatch(setStatus({status:RequestStatusType.Failed}))\r\n}\r\n\r\nexport const handleServerNetworkError = ( error: {message:string},dispatch: Dispatch) =>{\r\n    dispatch(setError(error.message ? {error:error.message}:{error:'Some error'}))\r\n    dispatch(setStatus({status:RequestStatusType.Failed}))\r\n}","import {authAPI, LoginParamsType} from \"../../api/todolistsApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setStatus} from \"../../App/appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn:false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name:'auth',\r\n    initialState:initialState,\r\n    reducers:{\r\n        setIsLoggedIn(state,action:PayloadAction<{value:boolean}>){\r\n            state.isLoggedIn=action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const AuthReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\nexport const loginTC =(data:LoginParamsType)=>{\r\n    return (dispatch:Dispatch)=>{\r\n        dispatch(setStatus({status:RequestStatusType.Loading}))\r\n        authAPI.login(data)\r\n            .then(res=>{\r\n                if(res.data.resultCode ===0){\r\n                    dispatch(setIsLoggedIn({value:true}))\r\n                }else{\r\n                    handleServerAppError(res.data,dispatch)\r\n                }\r\n            })\r\n            .catch(error=>{\r\n                handleServerNetworkError(error,dispatch)\r\n            })\r\n            .finally(()=>{\r\n                dispatch(setStatus({status:RequestStatusType.Succeeded}))\r\n            })\r\n    }\r\n}\r\n\r\nexport const logoutTC =()=>{\r\n    return (dispatch:Dispatch)=>{\r\n        dispatch(setStatus({status:RequestStatusType.Loading}))\r\n        authAPI.logout()\r\n            .then(res=>{\r\n                if(res.data.resultCode ===0){\r\n                    dispatch(setIsLoggedIn({value:false}))\r\n                }else{\r\n                    handleServerAppError(res.data,dispatch)\r\n                }\r\n            })\r\n            .catch(error=>{\r\n                handleServerNetworkError(error,dispatch)\r\n            })\r\n            .finally(()=>{\r\n                dispatch(setStatus({status:RequestStatusType.Succeeded}))\r\n            })\r\n    }\r\n}\r\n\r\n\r\n","import {todolistsApi, TodolistType} from \"../../../api/todolistsApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setStatus} from \"../../../App/appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/errorUtils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type FilterValuesType = 'all' | 'completed' | 'active';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name:'todolists',\r\n    initialState:initialState,\r\n    reducers:{\r\n        removeTodolist(state,action:PayloadAction<{todoListID: string}>){\r\n            const index = state.findIndex(tl=>tl.id===action.payload.todoListID)\r\n            if (index>-1){\r\n                state.splice(index,1)\r\n            }\r\n        },\r\n        addNewTodolist(state,action:PayloadAction<{todolist:TodolistType}>){\r\n            state.unshift({...action.payload.todolist,filter:'all',entityStatus:RequestStatusType.Idle})\r\n        },\r\n        updateTodolistTitle(state,action:PayloadAction<{todoListID: string, title: string}>){\r\n            const index = state.findIndex(tl=>tl.id===action.payload.todoListID)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeFilterTodoListAC(state,action:PayloadAction<{todoListID: string, filter: FilterValuesType}>){\r\n            const index = state.findIndex(tl=>tl.id===action.payload.todoListID)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        setTodoLists(state,action:PayloadAction<{todoLists: Array<TodolistType>}>){\r\n            return action.payload.todoLists.map(m => ({...m, filter: 'all',entityStatus:RequestStatusType.Idle}))\r\n        },\r\n        changeTodolistEntityStatus(state,action:PayloadAction<{todoListID:string, status:RequestStatusType}>){\r\n            const index = state.findIndex(tl=>tl.id===action.payload.todoListID)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n    }\r\n})\r\n\r\nexport const TodoListsReducer = slice.reducer\r\nexport const {removeTodolist,addNewTodolist,updateTodolistTitle,\r\n    changeFilterTodoListAC,setTodoLists,changeTodolistEntityStatus} = slice.actions\r\n\r\n\r\nexport type removeTodolistType = ReturnType<typeof removeTodolist>\r\nexport type AddNewTodolistType = ReturnType<typeof addNewTodolist>\r\nexport type setTodoListsType = ReturnType<typeof setTodoLists>\r\n\r\n\r\n//thunk\r\nexport const fetchTodolists = () => (dispatch: Dispatch) => {\r\n    dispatch(setStatus({status:RequestStatusType.Loading}))\r\n        todolistsApi.getTodolists()\r\n            .then(res => {\r\n                dispatch(setTodoLists({todoLists:res.data}))\r\n                dispatch(setStatus({status:RequestStatusType.Succeeded}))\r\n            })\r\n            .catch(error=>{\r\n                handleServerNetworkError(error,dispatch)\r\n            })\r\n}\r\n\r\nexport const removeTodoListTC = (todoListID:string) => (dispatch:Dispatch)=>{\r\n    dispatch(setStatus({status:RequestStatusType.Loading}))\r\n    dispatch(changeTodolistEntityStatus({todoListID:todoListID,status:RequestStatusType.Loading}))\r\n    return todolistsApi.deleteTodolist(todoListID)\r\n        .then(res => {\r\n            dispatch(removeTodolist({todoListID:todoListID}))\r\n            dispatch(setStatus({status:RequestStatusType.Succeeded}))\r\n        })\r\n\r\n}\r\n\r\nexport const addNewTodolistTC = (title:string) => (dispatch:Dispatch)=>{\r\n    dispatch(setStatus({status:RequestStatusType.Loading}))\r\n    return todolistsApi.createTodolist(title)\r\n        .then(res =>{\r\n            if(res.data.resultCode===0){\r\n                dispatch(addNewTodolist({todolist:res.data.data.item}))\r\n\r\n            }else{\r\n                handleServerAppError(res.data,dispatch)\r\n            }\r\n        })\r\n        .catch(error=>{\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n        .finally(()=>{\r\n            dispatch(setStatus({status:RequestStatusType.Succeeded}))\r\n        })\r\n}\r\n\r\nexport const updateTodolistTitleTC = (todolistId:string, title:string) => (dispatch:Dispatch)=>{\r\n    dispatch(setStatus({status:RequestStatusType.Loading}))\r\n    return todolistsApi.updateTodolist(todolistId,title)\r\n        .then(res =>{\r\n            dispatch(updateTodolistTitle({todoListID:todolistId,title:title}))\r\n            dispatch(setStatus({status:RequestStatusType.Succeeded}))\r\n        })\r\n}","import {TasksType} from \"../../../App/App\";\r\nimport {\r\n    addNewTodolist,\r\n    removeTodolist,\r\n    setTodoLists,\r\n\r\n} from \"./todoListsReducer\";\r\nimport {TaskType, todolistsApi, UpdateTaskModelType} from \"../../../api/todolistsApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootState} from \"../../../App/store\";\r\nimport {RequestStatusType, setStatus} from \"../../../App/appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/errorUtils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState: TasksType = {}\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        removeTask(state, action: PayloadAction<{ todoListID: string, id: string }>) {\r\n            const tasks = state[action.payload.todoListID]\r\n            const index = tasks.findIndex(t => t.id === action.payload.id)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addNewTask(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTask(state, action: PayloadAction<{ todoListID: string, id: string, model: UpdateDomainTaskModelType }>) {\r\n            const tasks = state[action.payload.todoListID]\r\n            const index = tasks.findIndex(t => t.id === action.payload.id)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTask(state, action: PayloadAction<{ tasks: Array<TaskType>, todoListID: string }>) {\r\n            state[action.payload.todoListID] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addNewTodolist, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        });\r\n        builder.addCase(removeTodolist, (state, action) => {\r\n            delete state[action.payload.todoListID];\r\n        });\r\n        builder.addCase(setTodoLists, (state, action) => {\r\n            action.payload.todoLists.forEach((tl:any)=>{\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n    }\r\n})\r\n\r\nexport const TasksReducer = slice.reducer\r\n//action creators\r\nexport const {removeTask,addNewTask,updateTask,setTask} = slice.actions\r\n\r\n//thunk\r\nexport const setTaskTC = (todoListID: string) => (dispatch: Dispatch) => {\r\n    dispatch(setStatus({status:RequestStatusType.Loading}))\r\n        todolistsApi.getTasks(todoListID)\r\n            .then((res) => {\r\n                dispatch(setTask({tasks:res.data.items, todoListID:todoListID}))\r\n                dispatch(setStatus({status:RequestStatusType.Succeeded}))\r\n            })\r\n    }\r\n\r\nexport const removeTaskTC = (todoListID: string, id: string) => (dispatch: Dispatch) => {\r\n    dispatch(setStatus({status:RequestStatusType.Loading}))\r\n    todolistsApi.deleteTask(todoListID, id)\r\n        .then(res => {\r\n            dispatch(removeTask({todoListID, id}))\r\n            dispatch(setStatus({status:RequestStatusType.Succeeded}))\r\n        })\r\n}\r\n\r\nexport const addNewTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setStatus({status:RequestStatusType.Loading}))\r\n    todolistsApi.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addNewTask({task:res.data.data.item}))\r\n            } else {\r\n                handleServerAppError(res.data,dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n        .finally(()=>{\r\n            dispatch(setStatus({status:RequestStatusType.Succeeded}))\r\n        })\r\n}\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport const updateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType) => {\r\n    return(dispatch: Dispatch, getState: () => AppRootState) => {\r\n        dispatch(setStatus({status:RequestStatusType.Loading}))\r\n        const currentTask = getState().Tasks[todolistId].find(f => f.id === taskId);\r\n        if (!currentTask) {\r\n            console.warn('Task not found')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: currentTask.title,\r\n            description: currentTask.description,\r\n            status: currentTask.status,\r\n            priority: currentTask.priority,\r\n            startDate: currentTask.startDate,\r\n            deadline: currentTask.deadline,\r\n            ...domainModel\r\n        }\r\n        todolistsApi.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTask({todoListID:todolistId, id:taskId, model:domainModel}))\r\n                } else {\r\n                 handleServerAppError(res.data,dispatch)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error,dispatch)\r\n            })\r\n            .finally(()=>{\r\n                dispatch(setStatus({status:RequestStatusType.Succeeded}))\r\n            })\r\n    }\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@mui/material\";\r\nimport {ControlPoint} from \"@mui/icons-material\";\r\n\r\n\r\n\r\ntype AddItemFormType = {\r\n    callBack: (title: string) => void\r\n    disabled:boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo( ({callBack,disabled=false,...props}: AddItemFormType) => {\r\n    const [newTaskTitle, setNewTaskTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressTitleHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            callBack(newTaskTitle);\r\n            setNewTaskTitle('');\r\n        }\r\n    }\r\n\r\n    const onClickTitleHandler = () => {\r\n        if (newTaskTitle.trim() === '') {\r\n            setError('Error')\r\n            return\r\n        }\r\n\r\n        callBack(newTaskTitle);\r\n        setNewTaskTitle('');\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            <TextField label={'type text'}\r\n                       value={newTaskTitle}\r\n                       onChange={onChangeTitleHandler}\r\n                       onKeyPress={onKeyPressTitleHandler}\r\n                       error={!!error}\r\n                       helperText={error}\r\n                       disabled={disabled}\r\n            />\r\n            <IconButton onClick={onClickTitleHandler} color={'primary'} disabled={disabled}>\r\n                <ControlPoint/>\r\n            </IconButton>\r\n        </div>\r\n\r\n    )\r\n})","import style from \"../../features/TodolistsList/Todolist/todoList.module.css\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\nimport {TaskStatuses} from \"../../api/todolistsApi\";\r\n\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    status?: number\r\n    callBack: (title: string) => void\r\n}\r\nexport const EditableSpan = React.memo( ({title, status, callBack, ...props}: EditableSpanType) => {\r\n    const [edit, setEdit] = useState<boolean>(false)\r\n    let [newTitle, setNewTitle] = useState(title)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const editTrue = () => setEdit(true)\r\n    const editFalse = () => {\r\n        setEdit(false)\r\n        callBack(newTitle.trim())\r\n    }\r\n    return (\r\n        edit ?\r\n            <TextField value={newTitle} onChange={onChangeHandler} className={status===TaskStatuses.Complete ? style.isDone : ''} onBlur={editFalse}\r\n                    autoFocus/>:\r\n            <span onDoubleClick={editTrue} className={status===TaskStatuses.Complete ? style.isDone : ''}>{title}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {removeTaskTC, updateTaskTC} from \"../tasksReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolistsApi\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todoListID: string\r\n}\r\nexport const Task = React.memo(({task, todoListID}: TaskPropsType) => {\r\n    const dispatch = useDispatch();\r\n    const onChangeTaskStatusHandler = useCallback((id: string, e: ChangeEvent<HTMLInputElement>) => {\r\n        const isDone = e.currentTarget.checked;\r\n        dispatch(updateTaskTC(todoListID, id, {status: isDone ? TaskStatuses.Complete : TaskStatuses.New}))\r\n    }, [todoListID,dispatch])\r\n\r\n    const updateTaskHandler = useCallback((id: string, newTitle: string) => {\r\n        dispatch(updateTaskTC(todoListID, id, {title: newTitle}))\r\n    }, [todoListID,dispatch])\r\n\r\n    const onClickRemoveTask = useCallback((id: string) => {\r\n        dispatch(removeTaskTC(todoListID, id))\r\n    }, [todoListID,dispatch]);\r\n    return (\r\n        <div>\r\n            <Checkbox\r\n                onChange={(e) => onChangeTaskStatusHandler(task.id, e)}\r\n                checked={task.status === TaskStatuses.Complete}\r\n            />\r\n            <EditableSpan title={task.title} status={task.status}\r\n                          callBack={(newTitle) => updateTaskHandler(task.id, newTitle)}/>\r\n\r\n            <IconButton onClick={() => onClickRemoveTask(task.id)}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, createTheme, IconButton, ThemeProvider} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from '../../../api/todolistsApi';\r\nimport {FilterValuesType, TodolistDomainType} from \"./todoListsReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setTaskTC} from \"./tasksReducer\";\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#ff9800'\r\n        }\r\n    }\r\n})\r\n\r\ntype propsType = {\r\n    todoList: TodolistDomainType\r\n    task: Array<TaskType>\r\n    changeFilter: (todoListID: string, value: FilterValuesType) => void\r\n    addNewTask: (todoListID: string, value: string) => void\r\n    removeTodolist: (todoListID: string) => void\r\n    updateTodolistTitle: (todoListID: string, title: string) => void\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const TodoList = React.memo(({demo = false, ...props}: propsType) => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        dispatch(setTaskTC(props.todoList.id))\r\n\r\n    }, [])\r\n\r\n    const onClickFilterHandler = useCallback((value: FilterValuesType) => props.changeFilter(props.todoList.id, value), [props.changeFilter, props.todoList.id]);\r\n\r\n    const AddTaskHandler = useCallback((title: string) => {\r\n        props.addNewTask(props.todoList.id, title)\r\n    }, [props.addNewTask, props.todoList.id])\r\n\r\n\r\n    const onClickRemoveTaskList = () => {\r\n        props.removeTodolist(props.todoList.id)\r\n    }\r\n\r\n    const updateTodolistHandler = useCallback((newTitle: string) => {\r\n        props.updateTodolistTitle(props.todoList.title, newTitle)\r\n    }, [props.updateTodolistTitle, props.todoList.id])\r\n\r\n    let tasksForTodoList = props.task\r\n    if (props.todoList.filter === 'active') {\r\n        tasksForTodoList = props.task.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todoList.filter === 'completed') {\r\n        tasksForTodoList = props.task.filter(t => t.status === TaskStatuses.Complete)\r\n    }\r\n\r\n    const mappingTasks = tasksForTodoList.map(t => {\r\n        return (\r\n            <Task key={t.id}\r\n                  task={t}\r\n                  todoListID={props.todoList.id}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h3>\r\n                <EditableSpan title={props.todoList.title} callBack={updateTodolistHandler}/>\r\n                <IconButton onClick={onClickRemoveTaskList} disabled={props.todoList.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n\r\n            <AddItemForm callBack={AddTaskHandler}\r\n                         disabled={props.todoList.entityStatus === 'loading'}\r\n            />\r\n\r\n            <div>\r\n                {mappingTasks}\r\n            </div>\r\n            <div>\r\n\r\n                <Button variant={props.todoList.filter === 'all' ? 'contained' : 'text'}\r\n                        onClick={() => {\r\n                            onClickFilterHandler('all')\r\n                        }}>all\r\n                </Button>\r\n\r\n                <ThemeProvider theme={theme}>\r\n                    <Button color={'primary'} variant={props.todoList.filter === 'active' ? 'contained' : 'text'}\r\n                            onClick={() => {\r\n                                onClickFilterHandler('active')\r\n                            }}>active\r\n                    </Button>\r\n                </ThemeProvider>\r\n                <Button color={\"secondary\"} variant={props.todoList.filter === 'completed' ? 'contained' : 'text'}\r\n                        onClick={() => {\r\n                            onClickFilterHandler('completed')\r\n                        }}>completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","export const URLS = {\r\n    LOGIN: '/login',\r\n    BASE: '/'\r\n}","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../App/store\";\r\nimport {\r\n    addNewTodolistTC,\r\n    changeFilterTodoListAC,\r\n    fetchTodolists,\r\n    FilterValuesType,\r\n    removeTodoListTC,\r\n    TodolistDomainType,\r\n    updateTodolistTitleTC\r\n} from \"./Todolist/todoListsReducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {addNewTaskTC} from \"./Todolist/tasksReducer\";\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {TodoList} from \"./Todolist/todoList\";\r\nimport {TasksType} from \"../../App/App\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {URLS} from \"../../shared/urls\";\r\n\r\ntype PropsType = {\r\n    demo?:boolean\r\n}\r\nexport const TodolistsList = ({demo = false}:PropsType) => {\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const todoLists = useSelector<AppRootState, Array<TodolistDomainType>>(state => state.TodoLists)\r\n    const tasks = useSelector<AppRootState, TasksType>(state => state.Tasks)\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.Login.isLoggedIn)\r\n\r\n    if (!isLoggedIn){\r\n        navigate(URLS.LOGIN)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(demo){\r\n            return\r\n        }\r\n        dispatch(fetchTodolists())\r\n    }, [demo,dispatch])\r\n\r\n    const addNewTodolistHandler = useCallback((title: string) => {\r\n        dispatch(addNewTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodoListTC(todolistId))\r\n    }, [dispatch])\r\n\r\n    const updateTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(updateTodolistTitleTC(todolistId, title))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((todolistId: string, filter: FilterValuesType) => {\r\n        dispatch(changeFilterTodoListAC({todoListID:todolistId,filter: filter}))\r\n    }, [dispatch])\r\n\r\n    const addNewTaskHandler = useCallback((todolistId: string, title: string) => {\r\n        dispatch(addNewTaskTC(todolistId, title))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            <Grid style={{padding: '20px'}}>\r\n                <AddItemForm callBack={addNewTodolistHandler}\r\n                             disabled = {false}\r\n                />\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {todoLists.map(el => {\r\n                        return (\r\n                            <Grid item>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <TodoList\r\n                                        key={el.id}\r\n                                        todoList = {el}\r\n                                        task={tasks[el.id]}\r\n                                        changeFilter={changeFilter}\r\n                                        addNewTask={addNewTaskHandler}\r\n                                        removeTodolist={removeTodolist}\r\n                                        updateTodolistTitle={updateTodolistTitle}\r\n                                        demo = {demo}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    }\r\n                )\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../App/store\";\r\nimport {setError} from \"../../App/appReducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const ErrorSnackbars = () => {\r\n    //const [open, setOpen] = React.useState(true);\r\n    const error = useSelector<AppRootState,string|null>(state=>state.App.error)\r\n    const dispatch = useDispatch()\r\n    const isOpen = error !== null\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setError({error:null}))\r\n    };\r\n\r\n    return (\r\n            <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n\r\n    );\r\n}","import {useFormik} from \"formik\";\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {AppRootState} from \"../../App/store\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {LoginParamsType} from \"../../api/todolistsApi\";\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootState,boolean>(state=>state.Login.isLoggedIn)\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n\r\n    if (isLoggedIn){\r\n        navigate('/')\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType,'captcha'>> = {};\r\n            if (!values.email) {\r\n                    errors.email = 'Email is required'\r\n            }else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                    errors.password = 'Password is required';\r\n            }else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n    return (\r\n        <Grid container justifyContent={'center'}>\r\n            <Grid item justifyContent={'center'}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>To log in get registered\r\n                                <a href={'https://social-network.samuraijs.com/'}\r\n                                   target={'_blank'}> here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField label=\"Email\"\r\n                                       margin=\"normal\"\r\n                                       {...formik.getFieldProps('email')}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email &&\r\n                            <div>{formik.errors.email}</div>}\r\n                            <TextField type=\"password\"\r\n                                       label=\"Password\"\r\n                                       margin=\"normal\"\r\n                                       {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.touched.password && formik.errors.password &&\r\n                            <div>{formik.errors.password}</div>}\r\n                            <FormControlLabel label={'Remember me'}\r\n                                              control={<Checkbox/>}\r\n                                              {...formik.getFieldProps('rememberMe')}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n\r\n\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@mui/material\";\r\nimport {TaskType} from \"../api/todolistsApi\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {ErrorSnackbars} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./store\";\r\nimport {initializeApp, RequestStatusType} from \"./appReducer\";\r\nimport {HashRouter, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/Login/authReducer\";\r\nimport {URLS} from \"../shared/urls\";\r\n\r\nexport type TasksType = { [key: string]: Array<TaskType> }\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\nexport const App = ({demo = false}: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootState, RequestStatusType>(state => state.App.status)\r\n    const isInitialized = useSelector<AppRootState, boolean>(state => state.App.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.Login.isLoggedIn)\r\n\r\n    useEffect(()=>{dispatch(initializeApp())},[])\r\n\r\n    if (!isInitialized) {\r\n        return (\r\n            <div style={{position: 'fixed', top: '30%',textAlign:'center',width:'100%'}}>\r\n                <CircularProgress/>\r\n            </div>\r\n        )}\r\n    const logoutHandler = () =>{\r\n        dispatch(logoutTC())\r\n    }\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n\r\n                <AppBar position=\"static\">\r\n                    <ErrorSnackbars/>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                            Todolist\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === RequestStatusType.Loading && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container>\r\n                    <Routes>\r\n                        <Route path={URLS.BASE} element={<TodolistsList demo={demo}/>}/>\r\n                        <Route path={URLS.LOGIN} element={<Login/>}/>\r\n                    </Routes>\r\n                </Container>\r\n\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {combineReducers} from \"redux\";\r\nimport {TodoListsReducer} from \"../features/TodolistsList/Todolist/todoListsReducer\";\r\nimport {TasksReducer} from \"../features/TodolistsList/Todolist/tasksReducer\";\r\nimport {AppReducer} from \"./appReducer\";\r\nimport {AuthReducer} from \"../features/Login/authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n    TodoLists: TodoListsReducer,\r\n    Tasks: TasksReducer,\r\n    App: AppReducer,\r\n    Login: AuthReducer\r\n})\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\n//export const store = createStore(rootReducer,applyMiddleware(thunk));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./App/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"todoList_error__1UehC\",\"errorMessage\":\"todoList_errorMessage__3f1sT\",\"activeFilter\":\"todoList_activeFilter__sS3jS\",\"isDone\":\"todoList_isDone__2yBgv\"};"],"sourceRoot":""}